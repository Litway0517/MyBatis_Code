<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mapper.UserMapper">

    <resultMap id="userMap" type="user">
        <id column="id" property="id" />
        <result column="username" property="username" />
        <result column="password" property="password" />
        <result column="age" property="age" />
        <result column="sex" property="sex" />
        <result column="email" property="email" />
        <result column="del_flag" property="delFlag" />
    </resultMap>


    <select id="selectUserVo">
        select * from `t_user`
    </select>

    <select id="findAll" resultMap="userMap">
        select * from `t_user`
    </select>

    <select id="getUserByUsername" parameterType="string" resultMap="userMap">
        select * from `t_user` where `username` = #{username}
    </select>

    <select id="getUserByUsername2" parameterType="string" resultMap="userMap">
        select * from `t_user` where `username` = '${username}'
    </select>


    <!--
        当请求参数有多个时, mybatis框架会把这些参数封装到Map对象中供调用. 这个Map的键默认为arg0 arg1 param0 param1 ...
        在SQL映射中需要取值的时候, 只需要给出键名即可. 另外可以组合取值. 如arg0 和 param1等
    -->
    <select id="getUserByUsernameAndPassword" resultMap="userMap">
        select * from `t_user` where `username` = #{arg0} and `password` = #{arg1}
    </select>


    <!--
        mybatis能够将多个参数自动封装到Map中供SQL使用.
        也能够手动设置mapper接口中的参数为Map, 然后根据自行定义的键来获取值.
     -->
    <select id="checkLogin" parameterType="map" resultMap="userMap">
        select * from `t_user` where `username` = #{username} and `password` = #{password}
    </select>

    <!--
        传过来的参数为user实体, 使用#{}占位符取对用实体的成员变量即可传递参数.
    -->
    <select id="checkRegister" parameterType="user" resultMap="userMap">
        <!--
            这里面的#{username}, 是User实体的setter方法, 而不是User实体的username成员变量. 注意!!
            mybatis先取到getUsername()方法这个属性(方法也叫做属性), 然后将get单词去掉, 剩余的是Username, 再将字母U变换成小写,
            得到了username, 再来取值. 因此属性不是指实体类中的成员变量.
            有一种情况, 一个实体类中没有成员变量, 但是会有getter\setter方法! 所以这里需要注意.
            鼠标跟踪下面的#{username}中的username时, 跟踪到的也是User实体类中的setUsername()方法!　
        -->
        select * from `t_user` where `username` = #{username}
    </select>



    <!--
        User checkLoginByParam(@Param("username") String username, @Param("password") String password);
        此时, MyBatis框架仍然是将参数存放到Map对象中. 但是存储username参数时, 对应的键是@Param()注解规定的值, 即username.
        同样, password参数对应的键是, password. 这样增强了可读性.
    -->
    <select id="checkLoginByParam" parameterType="map" resultMap="userMap">
        select * from `t_user` where `username` = #{username} and `password` = #{password}
    </select>





</mapper>


