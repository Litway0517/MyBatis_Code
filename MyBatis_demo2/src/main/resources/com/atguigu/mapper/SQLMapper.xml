<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mapper.SQLMapper">
    <resultMap id="userMap" type="user">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="age" property="age"/>
        <result column="sex" property="sex"/>
        <result column="email" property="email"/>
        <result column="del_flag" property="delFlag"/>
    </resultMap>

    <sql id="selectUserVo">
        select * from `t_user`
    </sql>

    <select id="getUserByLike" resultMap="userMap">
        <include refid="selectUserVo" />
        <where>
            <!--
                username like '%#{username}%'
                此时会报错, 因为位于单引号中的占位符会被认为是一个字符串, 不会被解析, 参数也不能赋值上去.
            -->
            <!-- 第一种方法 -->
            <!--username like '%${username}%'-->

            <!-- 第二种方法 concat()字符串拼接 -->
            <!--username like concat('%', #{username}, '%')-->

            <!-- 第三种方法 最常用的 -->
            username like '%'#{username}'%'
        </where>
    </select>

    <delete id="deleteMore" parameterType="string">
        <!--
            这样删除是有问题的. 虽然使用了占位符 但是#{}给参数增加了单引号导致删除不报错但是没有真正地执行其效果
            需要使用 ${}: ${}不会自动加单引号. 需要手动加. 这也是为什么上面getUserByLike方法加了单引号. 不加单引号就能起到作用了.
        -->
        <!--
            Mybatis框架在处理 ${}和#{} 时的区别: #{}是预编译处理(替换再赋值) ${}是字符串替换
                - #{}: 会将sql中的#{}替换成?号, 然后使用PreparedStatement的set方法赋值
                    因此第一个语句就会变成 -> update `t_user` set del_flag = '2' where id in (?)
                    显然 1,2,3 这三个参数没法赋值上去(参考调用的方法)

                - ${}: 会将${}替换成变量的值
                    因此sql语句就成为了 -> update `t_user` set del_flag = '2' where id in (1, 2, 3)
                    达到效果

                #{}可以有效防止SQL注入
        -->
        <!--update `t_user` set del_flag = '2' where id in (#{ids})-->
        update `t_user` set del_flag = '2' where id in (${ids})
    </delete>

    <select id="getUserByTableName" resultType="user" resultMap="userMap">
        <!--
            #{}也能够得到mapper接口中的方法的参数, 但是这个参数会被自动加上单引号, 但是表名是不能加单引号的.
            表名不能加单引号这是一条标准
            下面的SQL报错
        -->
        <!--select * from #{tableName}-->
        select * from `${tableName}`
    </select>

    <!--
        void insertUser(User user);
        insertUser(User user)的返回值是void. SQL增删改的返回值是固定的, 就是受影响的行数.
        所以, 此SQL执行之后返回的主键肯定不是insertUser(User user)的返回值.
        将此返回的主键放在User的某个对象中, 此时是id属性.

        keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中
    -->
    <insert id="insertUser" parameterType="user" useGeneratedKeys="true" keyProperty="id">
        insert into `t_user` values(null,#{username},#{password},#{age},#{sex},#{email},#{delFlag})
    </insert>
</mapper>


