<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mapper.EmployeeMapper">
    <resultMap id="selectEmployeeVo" type="employee">
        <!--
            id标签是主键字段的映射关系
            javaType: 指的是该成员变量的Java类型
            jdbcType: 指的是数据库中该字段的类型
            javaType 和 jdbcType都不需要写也行
        -->
        <id column="eid" property="eId" javaType="Integer" jdbcType="INTEGER" />
        <!-- column标签是其他字段映射 -->
        <result column="emp_name" property="empName" />
        <result column="age" property="age" />
        <result column="sex" property="sex" />
        <result column="email" property="email" />
        <result column="del_flag" property="delFlag" />
    </resultMap>

    <!-- 使用级联进行映射 -->
    <resultMap id="selectEmployeeByIdVo" type="employee">
        <!--
            resultMap标签中可以设置两个id标签
            id需要设置在result之前
        -->
        <id column="eid" property="eId" />
        <id column="dept_did" property="dept.deptId" />
        <result column="emp_name" property="empName" />
        <result column="age" property="age" />
        <result column="sex" property="sex" />
        <result column="email" property="email" />
        <result column="del_flag" property="delFlag" />
        <!-- 这里是通过的级联的形式 不推荐使用 可以使用下面的association实现 -->
        <result column="dept_name" property="dept.deptName" />
    </resultMap>

    <!-- 使用association进行映射 -->
    <resultMap id="selectEmployeeByAssociationVo" type="employee">
        <id column="eid" property="eId" />
        <result column="emp_name" property="empName" />
        <result column="age" property="age" />
        <result column="sex" property="sex" />
        <result column="email" property="email" />
        <result column="del_flag" property="delFlag" />
        <association property="dept" javaType="com.atguigu.domain.Dept" >
            <id column="dept_did" property="deptId" />
            <result column="dept_name" property="deptName" />
        </association>
    </resultMap>

    <!-- 分步查询 -->
    <resultMap id="selectEmployeeAndDeptByStep" type="employee" >
        <id column="eid" property="eId" />
        <result column="emp_name" property="empName" />
        <result column="age" property="age" />
        <result column="sex" property="sex" />
        <result column="email" property="email" />
        <result column="del_flag" property="delFlag" />

        <!--
            根据当前sql查询出来的结果的column字段去调用select属性指明的方法, 并将方法的返回值赋值给property属性指明的成员变量
            select的调用方式是 全限名+方法名. 实际上就是namespace+id.

            fetchType是的延迟加载可控(前提是开启了全局延迟加载才会生效 否则无论是lazy还是eager都是一样的效果)
            fetchType="lazy|eager"
                lazy: 懒加载
                eager 立即加载
        -->
        <association column="emp_did"
                     property="dept"
                     select="com.atguigu.mapper.DeptMapper.getEmpAndDeptByStepTwo"
                     fetchType="eager"
                     javaType="com.atguigu.domain.Dept" >
        </association>
    </resultMap>


    <sql id="selectEmployeeVo">
        select * from `t_emp`
    </sql>

    <select id="getAllEmployee" resultType="employee" >
        <include refid="selectEmployeeVo" />
    </select>

    <select id="getAllEmployeeNew" resultMap="selectEmployeeVo">
        <include refid="selectEmployeeVo" />
    </select>

    <select id="getEmployeeById" resultMap="selectEmployeeByIdVo">
        select emp.eid, emp.emp_name, emp.age, emp.sex, emp.email, emp.did as `emp_did`, emp.del_flag,
               dept.did as `dept_did`, dept.dept_name
        from `t_emp` `emp`
        left join `t_dept` `dept` on emp.did = dept.did
        where emp.eid = #{eId}
    </select>

    <select id="getEmployeeByIdAssociation" resultMap="selectEmployeeByAssociationVo">
        select emp.eid, emp.emp_name, emp.age, emp.sex, emp.email, emp.did as `emp_did`, emp.del_flag,
                dept.did as `dept_did`, dept.dept_name
        from `t_emp` `emp`
        left join `t_dept` `dept` on emp.did = dept.did
        where emp.eid = #{eId}
    </select>

    <select id="getEmployeeAndDeptByStepOne" resultMap="selectEmployeeAndDeptByStep" >
        select emp.eid, emp.emp_name, emp.age, emp.sex, emp.email, emp.did as `emp_did`, emp.del_flag
        from `t_emp` `emp`
        <where>
            <if test="eId != null and eId !=''">and eid = #{eId}</if>
        </where>
    </select>

    <select id="getEmployeeByDeptId" resultType="com.atguigu.domain.Employee">
        select emp.eid, emp.emp_name, emp.age, emp.sex, emp.email, emp.did as `emp_did`, emp.del_flag
        from `t_emp` `emp`
        <where>
            <if test="dId != null and dId !=''">and did = #{dId}</if>
        </where>
    </select>
</mapper>



