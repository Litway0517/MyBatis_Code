<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mapper.DynamicSQL">

    <resultMap id="getEmployeeMapVo" type="Employee">
        <id column="eid" property="eId" />
        <result column="emp_name" property="empName" />
        <result column="age" property="age" />
        <result column="sex" property="sex" />
        <result column="email" property="email" />
        <result column="delFlag" property="delFlag" />
    </resultMap>

    <sql id="selectEmployeeVo">
        select emp.eid, emp.emp_name, emp.age, emp.sex, emp.email, emp.did as `emp_did`, emp.del_flag
        from `t_emp` `emp`
    </sql>

    <select id="getEmployeeByCondition" resultType="com.atguigu.domain.Employee">
        <include refid="selectEmployeeVo" />
        where 1 = 1
        <if test="empName != null and empName != ''">and emp_name = #{empName}</if>
        <if test="age != null and age != ''">and age = #{age}</if>
        <if test="sex != null and sex != ''">and sex = #{sex}</if>
        <if test="email != null and email != ''">and email = #{email}</if>
    </select>

    <select id="getEmployeeByConditionTwo" resultType="com.atguigu.domain.Employee">
        <include refid="selectEmployeeVo" />
        <!--
            where标签
                能够根据where标签内部的if进行动态的生成. 而且, 还能够处理每一个字段前面多余的and 或者 or这种连接词
                where标签中的if标签如果都不成立, 那么不会拼接where关键字的
            注意: where标签不能将其内部的成立的if语句的后面的and去掉, 比如 emp_name = #{empName} and (此时and会报错)
        -->
        <where>
            <if test="empName != null and empName != ''">and emp_name = #{empName}</if>
            <if test="age != null and age != ''">and age = #{age}</if>
            <if test="sex != null and sex != ''">and sex = #{sex}</if>
            <if test="email != null and email != ''">and email = #{email}</if>
        </where>
    </select>

    <select id="getEmployeeByConditionThree" resultType="com.atguigu.domain.Employee">
        <include refid="selectEmployeeVo" />
        <!--
            trim标签
                prefix|suffix: 针对整体
                    首先, trim标签中的所有子标签经过计算后得到一个整体, 然后再在该整体的 前面|后面 加上指定内容~
                prefixOverrides|suffixOverrides: 针对trim标签中的每一个子标签
                    去掉trim标签中的每一个子标签的 前面或后面 指定内容
            若当trim标签中的子标签均不成立时, trim标签没有效果(特指prefix和suffix不会起作用) 不会拼接SQL语句中
        -->
        <trim prefix="where" suffix="and 1 = 1" suffixOverrides="and|or">
            <if test="empName != null and empName != ''">emp_name = #{empName} and</if>
            <if test="age != null and age != ''">age = #{age} or</if>
            <if test="sex != null and sex != ''">sex = #{sex} and</if>
            <if test="email != null and email != ''">email = #{email} and</if>
        </trim>
    </select>

    <select id="getEmployeeByConditionFourth" resultType="com.atguigu.domain.Employee">
        <include refid="selectEmployeeVo" />
        <!--
            注意:
                如果prefix="where", 那么一般是多条件查询, 此时也应该写上prefixOverrides, 不然的话,
                trim标签并不会自动处理多余的 and|or 等这类连接词. 就会导致连接条件报错
        -->
        <trim prefix="where" prefixOverrides="and|or" suffixOverrides="and 测试后缀 | or 测试后缀 | 'not' 测试后缀">
            <if test="empName != null and empName != ''">emp_name = #{empName} and 测试后缀</if>
            <if test="age != null and age != ''">and age = #{age} and 测试后缀</if>
            <if test="sex != null and sex != ''">and sex = #{sex} or 测试后缀</if>
            <if test="email != null and email != ''">and email = #{email} 'not' 测试后缀</if>
        </trim>
    </select>
</mapper>


